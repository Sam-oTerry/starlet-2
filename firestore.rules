rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (request.auth.token.email == 'admin@starletproperties.ug' || 
         request.auth.token.email == 'admin@starlet.co.ug' ||
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['email', 'displayName', 'role', 'createdAt']) &&
             request.resource.data.email is string &&
             request.resource.data.displayName is string &&
             request.resource.data.role in ['user', 'agent', 'admin'] &&
             request.resource.data.createdAt is timestamp;
    }
    
    function isValidListingData() {
      return request.resource.data.keys().hasAll(['title', 'description', 'price', 'type', 'status', 'createdAt']) &&
             request.resource.data.title is string &&
             request.resource.data.description is string &&
             request.resource.data.price is number &&
             request.resource.data.type in ['house_sale', 'house_rent', 'land_sale', 'land_rent', 'commercial', 'vacation_short_stay'] &&
             request.resource.data.status in ['pending', 'approved', 'rejected'] &&
             request.resource.data.createdAt is timestamp;
    }
    
    function isValidMessageData() {
      return request.resource.data.keys().hasAll(['text', 'senderId', 'createdAt']) &&
             request.resource.data.text is string &&
             request.resource.data.senderId is string &&
             request.resource.data.createdAt is timestamp;
    }

    // Users collection
    match /users/{userId} {
      // Users can read their own data, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can create their own profile during signup
      allow create: if isOwner(userId) && isValidUserData();
      
      // Users can update their own data, admins can update any
      allow update: if isOwner(userId) || isAdmin();
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Listings collection
    match /listings/{listingId} {
      // Anyone can read approved listings
      allow read: if resource.data.status == 'approved';
      
      // Authenticated users can read their own listings
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Admins can read all listings
      allow read: if isAdmin();
      
      // Authenticated users can create listings
      allow create: if isAuthenticated() && isValidListingData() && 
                   request.resource.data.userId == request.auth.uid;
      
      // Users can update their own listings, admins can update any
      allow update: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      
      // Users can delete their own listings, admins can delete any
      allow delete: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Users can read conversations they're part of
      allow read: if isAuthenticated() && 
                   request.auth.uid in resource.data.participants;
      
      // Admins can read all conversations
      allow read: if isAdmin();
      
      // Authenticated users can create conversations
      allow create: if isAuthenticated() && 
                   request.auth.uid in request.resource.data.participants;
      
      // Users can update conversations they're part of, admins can update any
      allow update: if (isAuthenticated() && 
                       request.auth.uid in resource.data.participants) || isAdmin();
      
      // Users can delete conversations they're part of, admins can delete any
      allow delete: if (isAuthenticated() && 
                       request.auth.uid in resource.data.participants) || isAdmin();
      
      // Messages subcollection
      match /messages/{messageId} {
        // Users can read messages in conversations they're part of
        allow read: if isAuthenticated() && 
                     get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants[request.auth.uid] != null;
        
        // Admins can read all messages
        allow read: if isAdmin();
        
        // Authenticated users can create messages in conversations they're part of
        allow create: if isAuthenticated() && 
                     request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
                     isValidMessageData() &&
                     request.resource.data.senderId == request.auth.uid;
        
        // Users can update their own messages, admins can update any
        allow update: if (isAuthenticated() && 
                         resource.data.senderId == request.auth.uid) || isAdmin();
        
        // Users can delete their own messages, admins can delete any
        allow delete: if (isAuthenticated() && 
                         resource.data.senderId == request.auth.uid) || isAdmin();
      }
    }
    
    // Stores collection
    match /stores/{storeId} {
      // Anyone can read approved stores
      allow read: if resource.data.status == 'approved';
      
      // Store owners can read their own stores
      allow read: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
      
      // Admins can read all stores
      allow read: if isAdmin();
      
      // Authenticated users can create stores
      allow create: if isAuthenticated() && 
                   request.resource.data.ownerId == request.auth.uid;
      
      // Store owners can update their stores, admins can update any
      allow update: if (isAuthenticated() && resource.data.ownerId == request.auth.uid) || isAdmin();
      
      // Store owners can delete their stores, admins can delete any
      allow delete: if (isAuthenticated() && resource.data.ownerId == request.auth.uid) || isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      
      // Admins can read all notifications
      allow read: if isAdmin();
      
      // System can create notifications for users
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      // Users can update their own notifications, admins can update any
      allow update: if (isAuthenticated() && 
                       resource.data.userId == request.auth.uid) || isAdmin();
      
      // Users can delete their own notifications, admins can delete any
      allow delete: if (isAuthenticated() && 
                       resource.data.userId == request.auth.uid) || isAdmin();
    }
    
    // Broadcasts collection
    match /broadcasts/{broadcastId} {
      // Only admins can read, write, and delete broadcasts
      allow read, write, delete: if isAdmin();
    }
    
    // Admin settings collection
    match /adminSettings/{settingId} {
      // Only admins can access admin settings
      allow read, write, delete: if isAdmin();
    }
    
    // Analytics collection
    match /analytics/{analyticsId} {
      // Only admins can access analytics
      allow read, write, delete: if isAdmin();
    }
    
    // Mail collection (for Firebase Extensions)
    match /mail/{mailId} {
      // Only admins can send emails
      allow read, write, delete: if isAdmin();
    }
    
    // Email notifications collection (fallback)
    match /emailNotifications/{notificationId} {
      // Only admins can manage email notifications
      allow read, write, delete: if isAdmin();
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 