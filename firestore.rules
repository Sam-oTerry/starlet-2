rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isStaff() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'staff'];
    }
    
    function isAgent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'staff', 'agent'];
    }
    
    function isSeller() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'staff', 'agent', 'seller'];
    }
    
    function isParticipant(participants) {
      return isAuthenticated() && request.auth.uid in participants;
    }
    
    function isListingOwner(listingData) {
      return isAuthenticated() && 
        (request.auth.uid == listingData.userId || 
         request.auth.uid == listingData.agentId);
    }
    
    function isInquiryOwner(inquiryData) {
      return isAuthenticated() && 
        (request.auth.uid == inquiryData.userId || 
         request.auth.uid == inquiryData.assignedTo);
    }
    
    function isStoreOwner(storeData) {
      return isAuthenticated() && request.auth.uid == storeData.agentId;
    }
    
    // Users collection - Very permissive for app functionality
    match /users/{userId} {
      allow read, write: if isAuthenticated();
      
      // User subcollections - Allow users to access their saved listings
      match /savedListings/{listingId} {
        allow read, write: if isAuthenticated();
      }
      
      match /notifications/{notificationId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Listings collection
    match /listings/{listingId} {
      allow read: if true; // Public read access for listings
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.agentId);
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.agentId);
    }
    
    // Conversations/Chats collection - More permissive for messaging
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated();
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated();
      }
      
      // Typing subcollection
      match /typing/{userId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Chats collection (alternative messaging structure)
    match /chats/{chatId} {
      allow read, write: if isAuthenticated();
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated();
      }
      
      // Typing subcollection
      match /typing/{userId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Inquiries collection
    match /inquiries/{inquiryId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.assignedTo);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.assignedTo);
      allow delete: if false;
    }
    
    // Stores collection
    match /stores/{storeId} {
      allow read: if true; // Public read access for stores
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.agentId;
      allow delete: if false;
    }
    
    // Agent Stores collection
    match /agentStores/{storeId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.agentId;
      allow delete: if false;
    }
    
    // Vehicle data collections
    match /vehicleMakesModels/{docId} {
      allow read: if true;
      allow write: if false; // Only allow through admin panel
    }
    
    match /vehicleMakes/{makeId} {
      allow read: if true;
      allow write: if false; // Only allow through admin panel
      
      match /models/{modelId} {
        allow read: if true;
        allow write: if false; // Only allow through admin panel
      }
    }
    
    match /vehicleModels/{modelId} {
      allow read: if true;
      allow write: if false; // Only allow through admin panel
    }
    
    // Property metadata
    match /propertyMeta/{docId} {
      allow read: if true;
      allow write: if false; // Only allow through admin panel
    }
    
    // Presence collection (for online status)
    match /presence/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Resources collection (educational content)
    match /resources/{resourceId} {
      allow read: if true; // Public read access
      allow write: if false; // Only allow through admin panel
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow delete: if false;
    }
    
    // Messages collection (standalone messages)
    match /messages/{messageId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.recipientId);
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}